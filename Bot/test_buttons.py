import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from config import BOT_TOKEN

logging.basicConfig(level=logging.INFO)
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –¢–ï–°–¢–û–í–û–ï –ú–ï–ù–Æ
TEST_MENU = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–¢–µ—Å—Ç 1"), KeyboardButton(text="–¢–µ—Å—Ç 2")],
        [KeyboardButton(text="ü™ô –¢–û–ü-–º–∞–π–Ω–µ—Ä—ã"), KeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")]
    ],
    resize_keyboard=True,
    is_persistent=True,
    one_time_keyboard=False
)

@dp.message(CommandStart())
async def start_handler(message: Message):
    print(f"üü¢ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer(
        "üîß <b>–¢–ï–°–¢ –ö–ù–û–ü–û–ö</b>\n\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞:",
        reply_markup=TEST_MENU
    )

# –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
@dp.message(F.text == "–¢–µ—Å—Ç 1")
async def test1_handler(message: Message):
    print(f"‚úÖ –†–ê–ë–û–¢–ê–ï–¢: –¢–µ—Å—Ç 1 –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer("‚úÖ <b>–ö–Ω–æ–ø–∫–∞ '–¢–µ—Å—Ç 1' –†–ê–ë–û–¢–ê–ï–¢!</b>", reply_markup=TEST_MENU)

@dp.message(F.text == "–¢–µ—Å—Ç 2")
async def test2_handler(message: Message):
    print(f"‚úÖ –†–ê–ë–û–¢–ê–ï–¢: –¢–µ—Å—Ç 2 –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer("‚úÖ <b>–ö–Ω–æ–ø–∫–∞ '–¢–µ—Å—Ç 2' –†–ê–ë–û–¢–ê–ï–¢!</b>", reply_markup=TEST_MENU)

# –ö–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏
@dp.message(F.text == "ü™ô –¢–û–ü-–º–∞–π–Ω–µ—Ä—ã")
async def emoji1_handler(message: Message):
    print(f"‚úÖ –≠–ú–û–î–ó–ò –†–ê–ë–û–¢–ê–ï–¢: –¢–û–ü-–º–∞–π–Ω–µ—Ä—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer("‚úÖ <b>–ö–Ω–æ–ø–∫–∞ —Å —ç–º–æ–¥–∑–∏ 'ü™ô –¢–û–ü-–º–∞–π–Ω–µ—Ä—ã' –†–ê–ë–û–¢–ê–ï–¢!</b>", reply_markup=TEST_MENU)

@dp.message(F.text == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def emoji2_handler(message: Message):
    print(f"‚úÖ –≠–ú–û–î–ó–ò –†–ê–ë–û–¢–ê–ï–¢: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer("‚úÖ <b>–ö–Ω–æ–ø–∫–∞ —Å —ç–º–æ–¥–∑–∏ 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞' –†–ê–ë–û–¢–ê–ï–¢!</b>", reply_markup=TEST_MENU)

# –õ–æ–≤–∏–º –í–°–ï —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(F.text)
async def catch_all_handler(message: Message):
    print(f"üîç –ü–û–õ–£–ß–ï–ù –¢–ï–ö–°–¢: '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    print(f"üîç –î–õ–ò–ù–ê: {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üîç –ë–ê–ô–¢–´: {message.text.encode('utf-8')}")
    print(f"üîç REPR: {repr(message.text)}")
    
    await message.answer(
        f"üîç <b>–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:</b>\n\n"
        f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: <code>{message.text}</code>\n"
        f"üìè –î–ª–∏–Ω–∞: {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤\n"
        f"üî¢ –ü–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞: {repr(message.text[:3])}\n\n"
        f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ!",
        reply_markup=TEST_MENU
    )

async def main():
    print("üîß –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ì–û –ë–û–¢–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–ù–û–ü–û–ö")
    print("üîß –í—Å–µ –Ω–∞–∂–∞—Ç–∏—è –±—É–¥—É—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 