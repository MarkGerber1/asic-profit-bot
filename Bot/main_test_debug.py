import asyncio
import logging

print("üîß TEST 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã...")

try:
    from aiogram import Bot, Dispatcher, F
    from aiogram.enums import ParseMode
    from aiogram.client.default import DefaultBotProperties
    from aiogram.filters import CommandStart, Command
    from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
    print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ aiogram –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ aiogram: {e}")
    exit(1)

try:
    from config import BOT_TOKEN
    print("‚úÖ config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ config: {e}")
    exit(1)

print("üîß TEST 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏...")

try:
    from ranking import get_top
    print("‚úÖ ranking –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ranking: {e}")

try:
    from currency import convert_currency, get_exchange_rate
    print("‚úÖ currency –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ currency: {e}")

try:
    from user_db import get_user_tariff
    print("‚úÖ user_db –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ user_db: {e}")

try:
    from messages import build_ranking_message
    print("‚úÖ messages –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ messages: {e}")

print("üîß TEST 3: –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç...")

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
default_props = DefaultBotProperties(parse_mode=ParseMode.HTML)
bot = Bot(BOT_TOKEN, default=default_props)
dp = Dispatcher()

# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
MAIN_MENU = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="ü™ô –¢–û–ü-–º–∞–π–Ω–µ—Ä—ã"),
            KeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"),
            KeyboardButton(text="üí∏ –ü—Ä–æ—Ñ–∏—Ç –≤ —Ä—É–±–ª—è—Ö")
        ],
        [
            KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            KeyboardButton(text="üõ†Ô∏è –ì–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ")
        ],
        [
            KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ"),
            KeyboardButton(text="ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞"),
            KeyboardButton(text="‚ùì FAQ")
        ]
    ],
    resize_keyboard=True,
    is_persistent=True,
    one_time_keyboard=False,
    input_field_placeholder="DEBUG –≤–µ—Ä—Å–∏—è..."
)

@dp.message(CommandStart())
async def cmd_start(message: Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    print(f"‚úÖ DEBUG /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer(
        "üîß <b>DEBUG –í–ï–†–°–ò–Ø –ë–û–¢–ê</b>\n\n"
        "‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!\n"
        "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å...\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:",
        reply_markup=MAIN_MENU
    )

@dp.message(F.text == "ü™ô –¢–û–ü-–º–∞–π–Ω–µ—Ä—ã")
async def menu_top_miners(message: Message):
    """DEBUG –≤–µ—Ä—Å–∏—è –¢–û–ü-–º–∞–π–Ω–µ—Ä–æ–≤"""
    print(f"‚úÖ DEBUG: –¢–û–ü-–º–∞–π–Ω–µ—Ä—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        print("üîß –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î...")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ get_user_tariff
        try:
            user_id = message.from_user.id
            tariff = await get_user_tariff(user_id) 
            print(f"‚úÖ –¢–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {tariff}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ get_user_tariff: {e}")
            tariff = 0.05  # default
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ get_top
        try:
            miners = await get_top(5, tariff, 'USD')
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –º–∞–π–Ω–µ—Ä–æ–≤: {len(miners) if miners else 0}")
            
            if miners:
                response_text = build_ranking_message(miners, 'USD', tariff)
                await message.answer(response_text, reply_markup=MAIN_MENU)
                return
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ get_top: {e}")
        
        # Fallback
        await message.answer(
            "üîß <b>DEBUG: –¢–û–ü-–º–∞–π–Ω–µ—Ä—ã</b>\n\n"
            "‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
            "üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...\n\n"
            "ü•á <b>Antminer S21 Pro</b>\n"
            "   üí∞ $50.23/–¥–µ–Ω—å | ‚ö° 3510–í—Ç\n\n"
            "üîß <i>–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–µ–Ω</i>",
            reply_markup=MAIN_MENU
        )
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ menu_top_miners: {e}")
        await message.answer(
            f"‚ùå <b>–û–®–ò–ë–ö–ê:</b>\n<code>{str(e)}</code>",
            reply_markup=MAIN_MENU
        )

@dp.message(F.text)
async def debug_all_text(message: Message):
    """DEBUG: –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print(f"üîß DEBUG —Ç–µ–∫—Å—Ç: '{message.text}' –æ—Ç {message.from_user.id}")
    await message.answer(
        f"üîß <b>DEBUG:</b> –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç\n"
        f"üìù <code>{message.text}</code>\n\n"
        f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é!",
        reply_markup=MAIN_MENU
    )

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ DEBUG –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞...")
    print("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"‚ùå –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc() 