"""
üí± API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§
‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏
‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ fallback –∑–Ω–∞—á–µ–Ω–∏—è
"""

import httpx
import xml.etree.ElementTree as ET
from datetime import datetime, timedelta
import asyncio
from typing import Dict, Optional
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class CurrencyAPI:
    def __init__(self):
        self.cache = {}
        self.cache_expiry = {}
        self.cache_duration = timedelta(hours=1)  # –ö–µ—à –Ω–∞ 1 —á–∞—Å
        
    async def get_usd_rub_rate(self) -> float:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD/RUB –æ—Ç –¶–ë –†–§
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        """
        cache_key = "USD_RUB"
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if (cache_key in self.cache and 
            cache_key in self.cache_expiry and 
            now < self.cache_expiry[cache_key]):
            logger.info(f"üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å USD/RUB: {self.cache[cache_key]}")
            return self.cache[cache_key]
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –¶–ë –†–§
            async with httpx.AsyncClient(timeout=10.0) as client:
                # API –¶–ë –†–§ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤
                url = "https://www.cbr.ru/scripts/XML_daily.asp"
                response = await client.get(url)
                response.raise_for_status()
                
                # –ü–∞—Ä—Å–∏–º XML –æ—Ç–≤–µ—Ç
                root = ET.fromstring(response.content)
                
                # –ò—â–µ–º –¥–æ–ª–ª–∞—Ä –°–®–ê (–∫–æ–¥ R01235)
                for valute in root.findall('Valute'):
                    char_code = valute.find('CharCode')
                    if char_code is not None and char_code.text == 'USD':
                        value_element = valute.find('Value')
                        if value_element is not None:
                            # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                            rate_str = value_element.text.replace(',', '.')
                            rate = float(rate_str)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                            self.cache[cache_key] = rate
                            self.cache_expiry[cache_key] = now + self.cache_duration
                            
                            logger.info(f"üí± –ü–æ–ª—É—á–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD/RUB –æ—Ç –¶–ë –†–§: {rate}")
                            return rate
                
                # –ï—Å–ª–∏ –¥–æ–ª–ª–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                logger.warning("‚ö†Ô∏è –î–æ–ª–ª–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –¶–ë –†–§, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return self._get_fallback_rate()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –æ—Ç –¶–ë –†–§: {e}")
            return self._get_fallback_rate()
    
    def _get_fallback_rate(self) -> float:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫—É—Ä—Å USD/RUB –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        """
        fallback_rate = 78.45  # –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è
        logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫—É—Ä—Å USD/RUB: {fallback_rate}")
        return fallback_rate
    
    async def convert_usd_to_rub(self, usd_amount: float) -> float:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –∏–∑ USD –≤ RUB
        """
        rate = await self.get_usd_rub_rate()
        rub_amount = usd_amount * rate
        return round(rub_amount, 2)
    
    async def format_currency_rub(self, usd_amount: float) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –≤ USD –∏ RUB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        rub_amount = await self.convert_usd_to_rub(usd_amount)
        rate = await self.get_usd_rub_rate()
        
        return f"${usd_amount:.2f} = {rub_amount:,.0f}‚ÇΩ (–∫—É—Ä—Å: {rate:.2f})"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
currency_api = CurrencyAPI()

# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def test_currency_api():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É API –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Currency API...")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞
    rate = await currency_api.get_usd_rub_rate()
    print(f"üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å USD/RUB: {rate}")
    
    # –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    test_amounts = [1, 10, 100, 1000]
    for amount in test_amounts:
        rub_amount = await currency_api.convert_usd_to_rub(amount)
        formatted = await currency_api.format_currency_rub(amount)
        print(f"üí± {formatted}")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(test_currency_api()) 