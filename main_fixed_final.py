"""
üöÄ ASIC Profit Bot - –§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
‚úÖ –í—Å–µ 8 –∫–Ω–æ–ø–æ–∫ —Å —ç–º–æ–¥–∑–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
‚úÖ –†–µ–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD/RUB –æ—Ç –¶–ë –†–§
‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–æ–≤
‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ä—É–±–ª–∏ –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É
‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∏ –¥–µ—Å–∫—Ç–æ–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤  
‚úÖ –ë–µ–∑ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≤–∏—Å–∞–Ω–∏–π
‚úÖ –ú–µ–Ω—é –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
"""

import asyncio
import logging
import sys
import time
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from config import BOT_TOKEN, SERVICE_BASE_URL

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π API –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
from currency_api import currency_api
from user_db import (
    init_user_db,
    get_user_settings,
    update_user_tariff,
    update_user_currency,
)
from scrapers.whattomine import fetch_wtm
from coin_price import get_algo_price_usd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–≤–æ–¥–∞/–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# –ù–∞ Windows –∫–æ–Ω—Å–æ–ª—å —á–∞—Å—Ç–æ –≤ cp1251 –∏ –ø–∞–¥–∞–µ—Ç –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —ç–º–æ–¥–∑–∏.
# –ü–µ—Ä–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º stdout/stderr –≤ UTF-8, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å UnicodeEncodeError.
try:  # Python 3.7+
    sys.stdout.reconfigure(encoding="utf-8", errors="replace")
    sys.stderr.reconfigure(encoding="utf-8", errors="replace")
except Exception:
    pass

logging.basicConfig(level=logging.INFO)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —ç–º–æ–¥–∑–∏ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
MAIN_MENU = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="ü™ô –¢–û–ü-–º–∞–π–Ω–µ—Ä—ã"),
            KeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"),
            KeyboardButton(text="üí∏ –ü—Ä–æ—Ñ–∏—Ç –≤ —Ä—É–±–ª—è—Ö")
        ],
        [
            KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            KeyboardButton(text="üõ†Ô∏è –ì–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ"),
            KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"),
        ],
        [
            KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ"),
            KeyboardButton(text="ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞"),
            KeyboardButton(text="‚ùì FAQ")
        ]
    ],
    resize_keyboard=True,           # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–¥ —ç–∫—Ä–∞–Ω
    is_persistent=True,             # –ú–µ–Ω—é –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º—ã–º –≤—Å–µ–≥–¥–∞
    one_time_keyboard=False,        # –ú–µ–Ω—é –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é ‚¨áÔ∏è"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
default_props = DefaultBotProperties(parse_mode=ParseMode.HTML)
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set. Please set environment variable BOT_TOKEN.")

bot = Bot(BOT_TOKEN, default=default_props)
dp = Dispatcher()

# –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±–µ–∑ FSM) –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
AWAIT_TARIFF: set[int] = set()
AWAIT_CURRENCY: set[int] = set()
AWAIT_CALC: set[int] = set()
AWAIT_CALC_TARIFF: set[int] = set()

# NH –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å: –ø–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥
NH_CALC_SESSION: dict[int, dict] = {}
AWAIT_NH_HASHRATE: set[int] = set()
AWAIT_NH_POWER: set[int] = set()
AWAIT_NH_ELECTRICITY: set[int] = set()

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
COMPARE_SESSION: dict[int, dict] = {}
AWAIT_COMPARE_ELECTRICITY: set[int] = set()

# –ú–∏–Ω–∏-–Ω–∞–±–æ—Ä –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ (–±–∞–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¢–û–ü)
CALC_MODELS = {
    "bitmain antminer s23 hyd 3u": {"power_w": 11020, "income_usd_day": 71.97},
    "antminer s21e xp hyd 3u": {"power_w": 11180, "income_usd_day": 53.36},
    "volcminer d1 hydro": {"power_w": 5510, "income_usd_day": 42.34},
    "iceriver ae2": {"power_w": 1200, "income_usd_day": 31.58},
    "antminer s21 xp hydro": {"power_w": 5676, "income_usd_day": 28.06},
}

# –ö–µ—à —Å–ø–∏—Å–∫–∞ –º–∞–π–Ω–µ—Ä–æ–≤ WhatToMine –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ (–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤)
CALC_WTM_CACHE: dict = {"miners": [], "ts": 0}

async def load_wtm_miners_if_needed(force: bool = False):
    now = time.time()
    if force or not CALC_WTM_CACHE["miners"] or (now - CALC_WTM_CACHE["ts"]) > 6 * 3600:
        miners = await asyncio.to_thread(fetch_wtm)
        CALC_WTM_CACHE["miners"] = miners
        CALC_WTM_CACHE["ts"] = now

def _best_match_miner(query: str):
    q = _normalize_model_name(query)
    best = None
    best_score = -1
    for m in CALC_WTM_CACHE["miners"]:
        name = _normalize_model_name(f"{m.vendor} {m.model}")
        # –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ —Å–∫–æ—Ä–∏–Ω–≥ –ø–æ –¥–ª–∏–Ω–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if q in name:
            score = len(q) / len(name)
            if score > best_score:
                best = m
                best_score = score
        elif name in q:
            score = len(name) / len(q)
            if score > best_score:
                best = m
                best_score = score
    return best

def _normalize_model_name(name: str) -> str:
    return " ".join(name.strip().lower().split())

# –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç (‚ÇΩ) –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏—Ç–µ
MODEL_PRICE_RUB: dict[str, int] = {
    "bitmain antminer s23 hyd 3u": 2900000,
    "antminer s21e xp hyd 3u": 2500000,
    "volcminer d1 hydro": 1600000,
    "iceriver ae2": 1000000,
    "antminer s21 xp hydro": 1800000,
}

def _format_price_rub(model_name: str) -> str:
    key = _normalize_model_name(model_name)
    price = MODEL_PRICE_RUB.get(key)
    return f"üõí –¶–µ–Ω–∞: {price:,}‚ÇΩ".replace(",", " ") if price else "üõí –¶–µ–Ω–∞: —É—Ç–æ—á–Ω—è–π—Ç–µ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"

def _get_price_rub(model_title: str) -> int | None:
    key = _normalize_model_name(model_title)
    return MODEL_PRICE_RUB.get(key)

def build_quick_tariff_kb(prefix: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="$0.03", callback_data=f"{prefix}0.03"), InlineKeyboardButton(text="$0.05", callback_data=f"{prefix}0.05")],
        [InlineKeyboardButton(text="$0.07", callback_data=f"{prefix}0.07"), InlineKeyboardButton(text="$0.08", callback_data=f"{prefix}0.08")],
        [InlineKeyboardButton(text="$0.10", callback_data=f"{prefix}0.10"), InlineKeyboardButton(text="‚ÇΩ –†—É–±–ª–∏", callback_data=f"{prefix}rub")],
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"{prefix}custom")]
    ])

# –†–∞–±–æ—Ç–∞ —Å —Ö–µ—à—Ä–µ–π—Ç–æ–º –∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏
UNIT_FACTORS = {
    "H": 1.0,
    "KH": 1e3,
    "MH": 1e6,
    "GH": 1e9,
    "TH": 1e12,
    "PH": 1e15,
}

ALGO_BASE_UNIT = {
    "SHA-256": "TH",
    "SCRYPT": "GH",
    "X11": "MH",
}

def parse_hashrate_string_to_hs(text: str) -> float:
    try:
        # –ø—Ä–∏–º–µ—Ä—ã: "1.16 Ph/s", "860 TH/s", "720 MH/s"
        t = text.upper().replace("/S", "").replace(" ", "")
        for unit in ["PH", "TH", "GH", "MH", "KH", "H"]:
            if unit in t:
                num = t.split(unit)[0]
                return float(num) * UNIT_FACTORS[unit]
    except Exception:
        return 0.0
    return 0.0

def convert_value_unit_to_hs(value: float, unit: str) -> float:
    unit = unit.upper()
    factor = UNIT_FACTORS.get(unit, 1.0)
    return value * factor

def convert_hs_to_unit(value_hs: float, unit: str) -> float:
    unit = unit.upper()
    factor = UNIT_FACTORS.get(unit, 1.0)
    return value_hs / factor

def choose_base_unit_for_algo(algo: str) -> str:
    return ALGO_BASE_UNIT.get(algo.upper(), "MH")

# –°–µ—Å—Å–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
CALC_SESSION: dict[int, dict] = {}

async def _finish_algo_session(msg_or_cb_message, user_id: int):
    sess = CALC_SESSION.get(user_id, {})
    algo = sess.get("algo")
    coins = float(sess.get("coins_per_day", 0.0))
    price = float(sess.get("price_usd", 0.0))
    gross_usd_day = float(sess.get("gross_usd_day", 0.0))
    tariff = float(sess.get("tariff", 0.0))
    # –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ (–Ω–µ—Ç –º–æ—â–Ω–æ—Å—Ç–∏), –ø–æ—ç—Ç–æ–º—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∏—Å—Ç—É—é = –≥—Ä—è–∑–Ω–æ–π, –ª–∏–±–æ –ø–æ–ø—Ä–æ—Å–∏–º –º–æ—â–Ω–æ—Å—Ç—å –≤—Ä—É—á–Ω—É—é –ø–æ–∑–∂–µ (–¥–æ–ø. —Ñ–∏—á–∞)
    elec_cost_usd_day = 0.0
    net_usd_day = gross_usd_day - elec_cost_usd_day
    net_usd_week = net_usd_day * 7
    net_usd_month = net_usd_day * 30
    usd_rub = await currency_api.get_usd_rub_rate()
    def usd2rub(x: float) -> float:
        return x * usd_rub
    text = (
        f"‚õèÔ∏è <b>–†–µ–∂–∏–º –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É ‚Äî {algo}</b>\n\n"
        f"ü™ô –ú–æ–Ω–µ—Ç –≤ —Å—É—Ç–∫–∏: <b>{coins:g}</b> | –¶–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã: <b>${price:.4f}</b>\n"
        f"üíµ –î–æ—Ö–æ–¥ (–≥—Ä—è–∑–Ω—ã–π): <b>${gross_usd_day:.2f}/–¥</b> (~{usd2rub(gross_usd_day):,.0f}‚ÇΩ/–¥)\n"
        f"üîå –¢–∞—Ä–∏—Ñ —É—á—Ç—ë–Ω: <b>${tariff:.3f}/–∫–í—Ç‚ãÖ—á</b>\n"
        f"‚úÖ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <b>${net_usd_day:.2f}/–¥</b> (~{usd2rub(net_usd_day):,.0f}‚ÇΩ/–¥)\n"
        f"‚Ä¢ –ù–µ–¥–µ–ª—è: <b>${net_usd_week:.2f}</b> (~{usd2rub(net_usd_week):,.0f}‚ÇΩ)\n"
        f"‚Ä¢ –ú–µ—Å—è—Ü: <b>${net_usd_month:.2f}</b> (~{usd2rub(net_usd_month):,.0f}‚ÇΩ)\n"
    )
    await msg_or_cb_message.answer(text, reply_markup=MAIN_MENU)
    CALC_SESSION.pop(user_id, None)

async def _calc_service(payload: dict) -> dict:
    import httpx
    async with httpx.AsyncClient(timeout=20.0) as client:
        r = await client.post(f"{SERVICE_BASE_URL}/calculate", json=payload)
        r.raise_for_status()
        return r.json()

async def _compare_and_show(msg_or_cb_message, user_id: int, price: float, currency: str):
    """–°—Ä–∞–≤–Ω–∏—Ç—å –¥–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–∏ –æ–±—â–µ–º —Ç–∞—Ä–∏—Ñ–µ."""
    import math
    sess = COMPARE_SESSION.get(user_id, {})
    d1 = sess.get("d1")
    d2 = sess.get("d2")
    if not d1 or not d2:
        await msg_or_cb_message.answer("‚ùå –°–µ—Å—Å–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /compare", reply_markup=MAIN_MENU)
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–≤–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–∏—Å—É
    payload_common = {
        "fees": {"marketplace_pct": 2.0, "pool_pct": 1.0},
        "uptime_pct": 98.0,
        "fiat": currency if currency in ["RUB","USD","EUR","CZK"] else "RUB",
        "periods": ["24h"],
    }
    p1 = {
        **payload_common,
        "mode": "algo",
        "algoId": d1.get("algoId"),
        "hashrate": {"value": float(d1.get("nominal_hashrate_value", 0)), "unit": d1.get("unit", "TH")},
        "power_w": float(d1.get("power_w", 0)),
        "electricity": {"value": price, "currency": currency},
    }
    p2 = {
        **payload_common,
        "mode": "algo",
        "algoId": d2.get("algoId"),
        "hashrate": {"value": float(d2.get("nominal_hashrate_value", 0)), "unit": d2.get("unit", "TH")},
        "power_w": float(d2.get("power_w", 0)),
        "electricity": {"value": price, "currency": currency},
    }
    try:
        r1, r2 = await asyncio.gather(_calc_service(p1), _calc_service(p2))
        one = r1.get("periods", {}).get("24h", {})
        two = r2.get("periods", {}).get("24h", {})
        sym = {"RUB":"‚ÇΩ","USD":"$","EUR":"‚Ç¨","CZK":"Kƒç"}.get(payload_common["fiat"], "")
        def fmt(v):
            return f"{v:,.2f}".replace(",", " ")
        title1 = f"{d1.get('vendor')} {d1.get('model')}"
        title2 = f"{d2.get('vendor')} {d2.get('model')}"
        # ROI –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω—ã
        roi1 = roi2 = ""
        price1_rub = _get_price_rub(title1)
        price2_rub = _get_price_rub(title2)
        if sym == "‚ÇΩ":
            if price1_rub and one.get("net_profit_fiat", 0) > 0:
                roi1 = f" | ROI: ~{price1_rub / one['net_profit_fiat']:.0f}–¥"
            if price2_rub and two.get("net_profit_fiat", 0) > 0:
                roi2 = f" | ROI: ~{price2_rub / two['net_profit_fiat']:.0f}–¥"
        text = (
            f"üîÄ <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤</b> (—Ç–∞—Ä–∏—Ñ: {price} {payload_common['fiat']}/–∫–í—Ç‚ãÖ—á)\n\n"
            f"1) <b>{title1}</b> ‚Äî —á–∏—Å—Ç–∞—è: <b>{fmt(one.get('net_profit_fiat', 0))}{sym}/–¥</b>{roi1}\n"
            f"   –≤–∞–ª: {fmt(one.get('revenue_fiat',0))}{sym}, —ç–ª.: {fmt(one.get('electricity_cost_fiat',0))}{sym}, –∫–æ–º.: {fmt(one.get('fees_fiat',0))}{sym}\n\n"
            f"2) <b>{title2}</b> ‚Äî —á–∏—Å—Ç–∞—è: <b>{fmt(two.get('net_profit_fiat', 0))}{sym}/–¥</b>{roi2}\n"
            f"   –≤–∞–ª: {fmt(two.get('revenue_fiat',0))}{sym}, —ç–ª.: {fmt(two.get('electricity_cost_fiat',0))}{sym}, –∫–æ–º.: {fmt(two.get('fees_fiat',0))}{sym}\n\n"
            f"<i>–†–∞—Å—á—ë—Ç—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ; –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç–∞–≤–æ–∫ ‚Äî NiceHash API.</i>"
        )
        await msg_or_cb_message.answer(text, reply_markup=MAIN_MENU)
    except Exception as e:
        await msg_or_cb_message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}", reply_markup=MAIN_MENU)

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    print(f"‚úÖ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    welcome_text = """
üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ASIC Profit Bot!</b>

ü™ô <b>–¢–û–ü-–º–∞–π–Ω–µ—Ä—ã</b> - –õ—É—á—à–∏–µ –º–∞–π–Ω–µ—Ä—ã –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</b> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç—Ä–µ–Ω–¥—ã —Ä—ã–Ω–∫–∞  
üí∏ <b>–ü—Ä–æ—Ñ–∏—Ç –≤ —Ä—É–±–ª—è—Ö</b> - –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª—è—Ö
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - –í–∞—à —Ç–∞—Ä–∏—Ñ –∏ –≤–∞–ª—é—Ç–∞
üõ†Ô∏è <b>–ì–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ</b> - –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥
‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
ü§ù <b>–ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞</b> - –ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å –Ω–∞–º–∏
‚ùì <b>FAQ</b> - –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã

<i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é ‚¨áÔ∏è</i>
"""
    
    await message.answer(welcome_text, reply_markup=MAIN_MENU)

# ü™ô –¢–û–ü-–º–∞–π–Ω–µ—Ä—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
@dp.message(F.text == "ü™ô –¢–û–ü-–º–∞–π–Ω–µ—Ä—ã")
async def cmd_top_miners(message: Message):
    print(f"‚úÖ –ö–ù–û–ü–ö–ê: –¢–û–ü-–º–∞–π–Ω–µ—Ä—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD/RUB
    usd_rub_rate = await currency_api.get_usd_rub_rate()
    
    response = f"""
ü™ô <b>–¢–û–ü-10 —Å–∞–º—ã—Ö –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤</b>

üí± <b>–ö—É—Ä—Å USD/RUB: {usd_rub_rate:.2f}‚ÇΩ</b> (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

ü•á <b>Bitmain Antminer S23 Hyd 3U</b>
üí∞ –î–æ—Ö–æ–¥: $71.97/–¥–µ–Ω—å ({await currency_api.convert_usd_to_rub(71.97):,.0f}‚ÇΩ)
‚ö° 11020W | üî• 1.16 Ph/s | üßÆ SHA-256

ü•à <b>Antminer S21E XP Hyd 3U</b>  
üí∞ –î–æ—Ö–æ–¥: $53.36/–¥–µ–Ω—å ({await currency_api.convert_usd_to_rub(53.36):,.0f}‚ÇΩ)
‚ö° 11180W | üî• 860 TH/s | üßÆ SHA-256

ü•â <b>VolcMiner D1 Hydro</b>
üí∞ –î–æ—Ö–æ–¥: $42.34/–¥–µ–Ω—å ({await currency_api.convert_usd_to_rub(42.34):,.0f}‚ÇΩ)
‚ö° 5510W | üî• 580 TH/s | üßÆ SHA-256

4Ô∏è‚É£ <b>Iceriver AE2</b>
üí∞ –î–æ—Ö–æ–¥: $31.58/–¥–µ–Ω—å ({await currency_api.convert_usd_to_rub(31.58):,.0f}‚ÇΩ)
‚ö° 1200W | üî• 720 MH/s | üßÆ zkSNARK

5Ô∏è‚É£ <b>Antminer S21 XP Hydro</b>
üí∞ –î–æ—Ö–æ–¥: $28.06/–¥–µ–Ω—å ({await currency_api.convert_usd_to_rub(28.06):,.0f}‚ÇΩ)
‚ö° 5676W | üî• 473 TH/s | üßÆ SHA-256

<i>üí° –†–∞—Å—á–µ—Ç –ø—Ä–∏ —Ç–∞—Ä–∏—Ñ–µ $0.10/–∫–í—Ç‚ãÖ—á ({await currency_api.convert_usd_to_rub(0.10):,.1f}‚ÇΩ/–∫–í—Ç‚ãÖ—á)</i>
<i>üìä –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>
<i>üÜò –í–æ–ø—Ä–æ—Å—ã: –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî –æ—Ç–≤–µ—Ç–∏–º</i>
"""
    
    await message.answer(response, reply_markup=MAIN_MENU)

# üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
@dp.message(F.text == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def cmd_analytics(message: Message):
    print(f"‚úÖ –ö–ù–û–ü–ö–ê: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    usd_rub_rate = await currency_api.get_usd_rub_rate()
    
    response = f"""
üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ ASIC-–º–∞–π–Ω–µ—Ä–æ–≤</b>

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –º–∞–π–Ω–µ—Ä–æ–≤ –≤ –±–∞–∑–µ: <b>347</b>
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö (>$1/–¥–µ–Ω—å): <b>89</b>
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: <b>258</b>

üî• <b>–¢–æ–ø –∞–ª–≥–æ—Ä–∏—Ç–º—ã:</b>
‚Ä¢ SHA-256 (Bitcoin): 89% –º–∞–π–Ω–µ—Ä–æ–≤
‚Ä¢ Scrypt (Litecoin): 7% –º–∞–π–Ω–µ—Ä–æ–≤  
‚Ä¢ X11 (Dash): 4% –º–∞–π–Ω–µ—Ä–æ–≤

üíπ <b>–¢—Ä–µ–Ω–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é:</b>
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ‚ÜóÔ∏è +2.3%
‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å —Å–µ—Ç–∏: ‚ÜóÔ∏è +1.8%
‚Ä¢ –ö—É—Ä—Å BTC: ‚ÜóÔ∏è +4.1%

‚ö° <b>–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –õ—É—á—à–∏–π: 15.2 –î–∂/TH (S21 XP)
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π: 28.5 –î–∂/TH
‚Ä¢ –•—É–¥—à–∏–π: 85.3 –î–∂/TH

üí± <b>–í–∞–ª—é—Ç–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>
‚Ä¢ USD/RUB: {usd_rub_rate:.2f}‚ÇΩ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü: —Å—Ç–∞–±–∏–ª—å–Ω–∞—è
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑: —É–º–µ—Ä–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å

<i>üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Å–µ–≥–æ–¥–Ω—è –≤ 14:30</i>
"""
    
    await message.answer(response, reply_markup=MAIN_MENU)

# üí∏ –ü—Ä–æ—Ñ–∏—Ç –≤ —Ä—É–±–ª—è—Ö - –û–ë–ù–û–í–õ–ï–ù–û —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫—É—Ä—Å–æ–º
@dp.message(F.text == "üí∏ –ü—Ä–æ—Ñ–∏—Ç –≤ —Ä—É–±–ª—è—Ö") 
async def cmd_profit_rub(message: Message):
    print(f"‚úÖ –ö–ù–û–ü–ö–ê: –ü—Ä–æ—Ñ–∏—Ç –≤ —Ä—É–±–ª—è—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD/RUB –æ—Ç –¶–ë –†–§
    usd_rub_rate = await currency_api.get_usd_rub_rate()
    
    response = f"""
üí∏ <b>–¢–û–ü-–º–∞–π–Ω–µ—Ä—ã –≤ —Ä—É–±–ª—è—Ö</b>

üèÜ <b>–ö—É—Ä—Å USD/RUB: {usd_rub_rate:.2f}‚ÇΩ</b> (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

ü•á <b>Bitmain Antminer S23 Hyd 3U</b>
üí∞ –î–æ—Ö–æ–¥: <b>{await currency_api.convert_usd_to_rub(71.97):,.0f}‚ÇΩ/–¥–µ–Ω—å</b> | üìà {await currency_api.convert_usd_to_rub(71.97 * 30):,.0f}‚ÇΩ/–º–µ—Å
{_format_price_rub('Bitmain Antminer S23 Hyd 3U')}

ü•à <b>Antminer S21E XP Hyd 3U</b>
üí∞ –î–æ—Ö–æ–¥: <b>{await currency_api.convert_usd_to_rub(53.36):,.0f}‚ÇΩ/–¥–µ–Ω—å</b> | üìà {await currency_api.convert_usd_to_rub(53.36 * 30):,.0f}‚ÇΩ/–º–µ—Å
{_format_price_rub('Antminer S21E XP Hyd 3U')}

ü•â <b>VolcMiner D1 Hydro</b> 
üí∞ –î–æ—Ö–æ–¥: <b>{await currency_api.convert_usd_to_rub(42.34):,.0f}‚ÇΩ/–¥–µ–Ω—å</b> | üìà {await currency_api.convert_usd_to_rub(42.34 * 30):,.0f}‚ÇΩ/–º–µ—Å
{_format_price_rub('VolcMiner D1 Hydro')}

4Ô∏è‚É£ <b>Iceriver AE2</b>
üí∞ –î–æ—Ö–æ–¥: <b>{await currency_api.convert_usd_to_rub(31.58):,.0f}‚ÇΩ/–¥–µ–Ω—å</b> | üìà {await currency_api.convert_usd_to_rub(31.58 * 30):,.0f}‚ÇΩ/–º–µ—Å
{_format_price_rub('Iceriver AE2')}

5Ô∏è‚É£ <b>Antminer S21 XP Hydro</b>
üí∞ –î–æ—Ö–æ–¥: <b>{await currency_api.convert_usd_to_rub(28.06):,.0f}‚ÇΩ/–¥–µ–Ω—å</b> | üìà {await currency_api.convert_usd_to_rub(28.06 * 30):,.0f}‚ÇΩ/–º–µ—Å
{_format_price_rub('Antminer S21 XP Hydro')}

üí° <b>–ü—Ä–∏ —Ç–∞—Ä–∏—Ñ–µ {await currency_api.convert_usd_to_rub(0.10):,.1f}‚ÇΩ/–∫–í—Ç‚ãÖ—á:</b>
‚Ä¢ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ —É—á—Ç–µ–Ω—ã
‚Ä¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –ø–æ—Å–ª–µ –∑–∞—Ç—Ä–∞—Ç
 
<i>üìä –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</i>
<i>üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –Ω–∞–ø–∏—à–∏—Ç–µ ‚Äî –æ—Ç–≤–µ—Ç–∏–º</i>
"""
    
    await message.answer(response, reply_markup=MAIN_MENU)

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def cmd_settings(message: Message):
    print(f"‚úÖ –ö–ù–û–ü–ö–ê: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    usd_rub_rate = await currency_api.get_usd_rub_rate()
    user = await get_user_settings(message.from_user.id)
    usd_tariff = float(user.get("electricity_tariff", 0.10))
    rub_tariff = usd_tariff * usd_rub_rate
    
    response = f"""
‚öôÔ∏è <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"}
üÜî <b>ID:</b> {message.from_user.id}

üí° <b>–¢–∞—Ä–∏—Ñ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ:</b>
–¢–µ–∫—É—â–∏–π: <b>${usd_tariff:.3f}/–∫–í—Ç‚ãÖ—á</b> ({rub_tariff}‚ÇΩ/–∫–í—Ç‚ãÖ—á)

üí∞ <b>–í–∞–ª—é—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>
–¢–µ–∫—É—â–∞—è: <b>{user.get('currency','USD')}</b>

üåç <b>–†–µ–≥–∏–æ–Ω:</b>
–¢–µ–∫—É—â–∏–π: <b>–†–æ—Å—Å–∏—è</b>

üí± <b>–ö—É—Ä—Å –≤–∞–ª—é—Ç:</b>
USD/RUB: <b>{usd_rub_rate:.2f}‚ÇΩ</b> (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞
‚Ä¢ –í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É (USD/RUB/EUR)
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –º–∞–π–Ω–µ—Ä—ã

<i>üí¨ –ù–∞–ø–∏—à–∏—Ç–µ "—Ç–∞—Ä–∏—Ñ" –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞</i>
<i>üí¨ –ù–∞–ø–∏—à–∏—Ç–µ "–≤–∞–ª—é—Ç–∞" –¥–ª—è —Å–º–µ–Ω—ã –≤–∞–ª—é—Ç—ã</i>
"""
    
    await message.answer(response, reply_markup=MAIN_MENU)

# üõ†Ô∏è –ì–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
@dp.message(F.text == "üõ†Ô∏è –ì–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ")
async def cmd_guide(message: Message):
    print(f"‚úÖ –ö–ù–û–ü–ö–ê: –ì–∞–π–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ –≥–∞–π–¥–µ
    usd_rub_rate = await currency_api.get_usd_rub_rate()
    
    response = f"""
üõ†Ô∏è <b>–ì–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–∞–π–Ω–∏–Ω–≥–∞</b>

üìã <b>–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>

1Ô∏è‚É£ <b>–í—ã–±–æ—Ä –º–∞–π–Ω–µ—Ä–∞</b>
‚Ä¢ –ò–∑—É—á–∏—Ç–µ –¢–û–ü-–º–∞–π–Ω–µ—Ä—ã –≤ –±–æ—Ç–µ
‚Ä¢ –£—á—Ç–∏—Ç–µ –≤–∞—à —Ç–∞—Ä–∏—Ñ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å

2Ô∏è‚É£ <b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–º–µ—â–µ–Ω–∏—è</b>
‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 15-25¬∞C
‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: 30-70%
‚Ä¢ –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
‚Ä¢ –®—É–º–æ–∏–∑–æ–ª—è—Ü–∏—è: —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è

3Ô∏è‚É£ <b>–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ</b>
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ 220V
‚Ä¢ –ó–∞–∑–µ–º–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
‚Ä¢ –£–ó–û –∏ –∞–≤—Ç–æ–º–∞—Ç—ã –∑–∞—â–∏—Ç—ã
‚Ä¢ –û—Ç–¥–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –¥–ª—è –º–æ—â–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤

        4Ô∏è‚É£ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–π–Ω–µ—Ä–∞</b>
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–ª–∞
‚Ä¢ –£–∫–∞–∑–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã

5Ô∏è‚É£ <b>–ü—É–ª—ã –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞</b>
‚Ä¢ Antpool, F2Pool, Poolin
‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: 1-3%
‚Ä¢ –í—ã–ø–ª–∞—Ç—ã: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ

        üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã:</b>
‚Ä¢ –ö—É—Ä—Å USD/RUB: {usd_rub_rate:.2f}‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ç–∞—Ä–∏—Ñ –≤ –†–§: 5‚ÇΩ/–∫–í—Ç‚ãÖ—á
        ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π ROI: &lt;12 –º–µ—Å—è—Ü–µ–≤

üí° <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</b>
‚Ä¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—É–ª—ã
‚Ä¢ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

<i>‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!</i>
"""
    
    await message.answer(response, reply_markup=MAIN_MENU)

# ‚ÑπÔ∏è –û –±–æ—Ç–µ
@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def cmd_about(message: Message):
    print(f"‚úÖ –ö–ù–û–ü–ö–ê: –û –±–æ—Ç–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    response = """
‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ ASIC Profit Bot</b>

üéØ <b>–ù–∞—à–∞ –º–∏—Å—Å–∏—è:</b>
–ü–æ–º–æ—á—å –º–∞–π–Ω–µ—Ä–∞–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ ASIC-–º–∞–π–Ω–µ—Ä–æ–≤.

üìä <b>–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:</b>
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ 347+ –º–∞–π–Ω–µ—Ä–∞—Ö
‚Ä¢ –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –£—á–µ—Ç –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ä—É–±–ª–∏ –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ç—Ä–µ–Ω–¥—ã —Ä—ã–Ω–∫–∞

üîÑ <b>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã (–±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞)
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

üë• <b>–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞:</b>
‚Ä¢ –û–ø—ã—Ç–Ω—ã–µ –º–∞–π–Ω–µ—Ä—ã —Å 2017 –≥–æ–¥–∞
‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
‚Ä¢ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 1,250+
‚Ä¢ –°—Ç—Ä–∞–Ω: 15+
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å: 5,000+

<b>–í–µ—Ä—Å–∏—è:</b> 2.1.0
<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> –Ø–Ω–≤–∞—Ä—å 2025

<i>üíå –°–≤—è–∑—å —Å –Ω–∞–º–∏: @support_asic_bot</i>
"""
    
    await message.answer(response, reply_markup=MAIN_MENU)

# ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞
@dp.message(F.text == "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞")
async def cmd_partnership(message: Message):
    print(f"‚úÖ –ö–ù–û–ü–ö–ê: –ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    usd_rub_rate = await currency_api.get_usd_rub_rate()
    
    response = f"""
ü§ù <b>–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>

üí∞ <b>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ —Å –Ω–∞–º–∏!</b>

üìà <b>–£—Å–ª–æ–≤–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:</b>
‚Ä¢ 10% –æ—Ç –ø–æ–∫—É–ø–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ 5% –æ—Ç –∏—Ö –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (2 —É—Ä–æ–≤–µ–Ω—å)
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞: $10 ({await currency_api.convert_usd_to_rub(10):,.0f}‚ÇΩ)
‚Ä¢ –í—ã–ø–ª–∞—Ç—ã –∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É

üéØ <b>–ß—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å:</b>
‚Ä¢ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –±–æ—Ç–∞ ($9.99/–º–µ—Å ‚âà {await currency_api.convert_usd_to_rub(9.99):,.0f}‚ÇΩ)
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ($50/—á–∞—Å ‚âà {await currency_api.convert_usd_to_rub(50):,.0f}‚ÇΩ)
‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ —Ñ–µ—Ä–º—ã –ø–æ–¥ –∫–ª—é—á
‚Ä¢ –û–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã –ø–æ –º–∞–π–Ω–∏–Ω–≥—É

üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: 0
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: $0.00 (0‚ÇΩ)
‚Ä¢ –ö –≤—ã–ø–ª–∞—Ç–µ: $0.00 (0‚ÇΩ)

üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
<code>https://t.me/asic_profit_helper_bot?start=ref_{message.from_user.id}</code>

üìã <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>
1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏
2. –û–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ  
3. –ü–æ–∫—É–ø–∞—é—Ç —É—Å–ª—É–≥–∏ - –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ %
4. –í—ã–≤–æ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –∫–∞—Ä—Ç—É/–∫–æ—à–µ–ª–µ–∫

üí∞ <b>–ö—É—Ä—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤:</b>
USD/RUB: {usd_rub_rate:.2f}‚ÇΩ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

üí° <b>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>
‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π
‚Ä¢ –ë–∞–Ω–Ω–µ—Ä—ã –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
‚Ä¢ –í–∏–¥–µ–æ-–æ–±–∑–æ—Ä—ã
‚Ä¢ –°—Ç–∞—Ç—å–∏ –∏ –≥–∞–π–¥—ã

<i>üí¨ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: @partnership_asic_bot</i>
"""
    
    await message.answer(response, reply_markup=MAIN_MENU)

# ‚ùì FAQ
@dp.message(F.text == "‚ùì FAQ")
async def cmd_faq(message: Message):
    print(f"‚úÖ –ö–ù–û–ü–ö–ê: FAQ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¥–ª—è FAQ
    usd_rub_rate = await currency_api.get_usd_rub_rate()
    
    response = f"""
‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>

<b>Q: –û—Ç–∫—É–¥–∞ –±–µ—Ä—É—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ –º–∞–π–Ω–µ—Ä–∞—Ö?</b>
A: –î–∞–Ω–Ω—ã–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤.

<b>Q: –ö–∞–∫ —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ?</b>  
A: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é; –∫—É—Ä—Å –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

<b>Q: –£—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ –º–æ–π —Ç–∞—Ä–∏—Ñ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ?</b>
A: –î–∞! –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ, –∏ –≤—Å–µ —Ä–∞—Å—á–µ—Ç—ã –±—É–¥—É—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏.

<b>Q: –ú–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –º–∞–π–Ω–µ—Ä –≤ –±–∞–∑—É?</b>
A: –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–æ–¥–µ–ª—å –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ - –º—ã –¥–æ–±–∞–≤–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.

<b>Q: –ü–æ—á–µ–º—É –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∞–π–Ω–µ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —É–±—ã—Ç–æ–∫?</b>
A: –ü—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ (>$0.10/–∫–í—Ç‚ãÖ—á) –º–Ω–æ–≥–∏–µ —Å—Ç–∞—Ä—ã–µ –º–∞–π–Ω–µ—Ä—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–µ—Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω—ã–º–∏.

<b>Q: –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ä—É–±–ª–∏?</b>
A: –ë–µ—Ä—ë–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD/RUB ({usd_rub_rate:.2f}‚ÇΩ –∑–∞ $1), –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

<b>Q: –ï—Å—Ç—å –ª–∏ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?</b>
A: –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ Telegram-–±–æ—Ç, –Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.

<b>Q: –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?</b>
A: –î–∞, –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–ø-–º–∞–π–Ω–µ—Ä–æ–≤.

<b>Q: –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø—Ä–µ–º–∏—É–º?</b>
A: $9.99/–º–µ—Å—è—Ü ({await currency_api.convert_usd_to_rub(9.99):,.0f}‚ÇΩ). –í–∫–ª—é—á–∞–µ—Ç: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É, –ø—Ä–æ–≥–Ω–æ–∑—ã, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.

<b>Q: –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞?</b>
A: –°–µ–π—á–∞—Å {usd_rub_rate:.2f}‚ÇΩ –∑–∞ $1 (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏).

<i>üí¨ –ù–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç? –ü–∏—à–∏—Ç–µ @support_asic_bot</i>
"""
    
    await message.answer(response, reply_markup=MAIN_MENU)

# üìû –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command('help'))
async def cmd_help(message: Message):
    print(f"‚úÖ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    response = """
üìû <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>

üöÄ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üéõÔ∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∏):</b>
ü™ô –¢–û–ü-–º–∞–π–Ω–µ—Ä—ã - –°–∞–º—ã–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –º–∞–π–Ω–µ—Ä—ã
üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞
üí∏ –ü—Ä–æ—Ñ–∏—Ç –≤ —Ä—É–±–ª—è—Ö - –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ ‚ÇΩ
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
üõ†Ô∏è –ì–∞–π–¥ - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –º–∞–π–Ω–∏–Ω–≥—É
‚ÑπÔ∏è –û –±–æ—Ç–µ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞ - –ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å –Ω–∞–º–∏
‚ùì FAQ - –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã

üí° <b>–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ç–µ–∫—Å—Ç):</b>
"—Ç–∞—Ä–∏—Ñ" - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞
"–≤–∞–ª—é—Ç–∞" - –°–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
"—Ç–æ–ø" - –ü–æ–∫–∞–∑–∞—Ç—å –¢–û–ü-10 –º–∞–π–Ω–µ—Ä–æ–≤
"–∫—É—Ä—Å" - –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD/RUB

<i>üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @support_asic_bot</i>
"""
    
    await message.answer(response, reply_markup=MAIN_MENU)

# ===== NH –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ =====

@dp.message(Command("calcnh"))
async def cmd_calcnh(message: Message):
    import httpx
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            r = await client.get(f"{SERVICE_BASE_URL}/algorithms")
            r.raise_for_status()
            algos = r.json()
        # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 12 –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        rows = []
        row = []
        for i, a in enumerate(algos[:12], 1):
            row.append(InlineKeyboardButton(text=a.get('name', a.get('id')), callback_data=f"nh_algo_{a.get('id')}"))
            if len(row) == 3:
                rows.append(row)
                row = []
        if row:
            rows.append(row)
        kb = InlineKeyboardMarkup(inline_keyboard=rows)
        await message.answer("‚õèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º (NH):", reply_markup=kb)
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã NH. {e}", reply_markup=MAIN_MENU)

@dp.message(Command("compare"))
async def cmd_compare(message: Message):
    """–í—ã–±–æ—Ä –¥–≤—É—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏."""
    import httpx
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            r = await client.get(f"{SERVICE_BASE_URL}/devices")
            r.raise_for_status()
            devices = r.json()
        rows = []
        for d in devices:
            title = f"{d.get('vendor')} {d.get('model')}"
            rows.append([InlineKeyboardButton(text=title, callback_data=f"cmp_pick1_{d.get('id')}")])
        kb = InlineKeyboardMarkup(inline_keyboard=rows)
        await message.answer("üîÄ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", reply_markup=kb)
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}", reply_markup=MAIN_MENU)

@dp.callback_query(F.data.startswith("cmp_pick1_"))
async def cb_cmp_pick1(callback):
    first_id = callback.data.split("cmp_pick1_")[-1]
    import httpx
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            r = await client.get(f"{SERVICE_BASE_URL}/devices")
            r.raise_for_status()
            devices = r.json()
        d1 = next((d for d in devices if d.get('id') == first_id), None)
        if not d1:
            await callback.message.answer("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=MAIN_MENU)
            await callback.answer()
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        COMPARE_SESSION[callback.from_user.id] = {"d1": d1}
        rows = []
        for d in devices:
            if d.get('id') == first_id:
                continue
            title = f"{d.get('vendor')} {d.get('model')}"
            rows.append([InlineKeyboardButton(text=title, callback_data=f"cmp_pick2_{d.get('id')}")])
        kb = InlineKeyboardMarkup(inline_keyboard=rows)
        await callback.message.answer("‚û°Ô∏è –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", reply_markup=kb)
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=MAIN_MENU)
    await callback.answer()

@dp.callback_query(F.data.startswith("cmp_pick2_"))
async def cb_cmp_pick2(callback):
    second_id = callback.data.split("cmp_pick2_")[-1]
    import httpx
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            r = await client.get(f"{SERVICE_BASE_URL}/devices")
            r.raise_for_status()
            devices = r.json()
        d2 = next((d for d in devices if d.get('id') == second_id), None)
        sess = COMPARE_SESSION.get(callback.from_user.id, {})
        d1 = sess.get("d1")
        if not d1 or not d2:
            await callback.message.answer("‚ùå –°–µ—Å—Å–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. /compare", reply_markup=MAIN_MENU)
            await callback.answer()
            return
        sess["d2"] = d2
        COMPARE_SESSION[callback.from_user.id] = sess
        # –ó–∞–ø—Ä–æ—Å–∏–º —Ç–∞—Ä–∏—Ñ (—Å –∫–Ω–æ–ø–∫–∞–º–∏)
        AWAIT_COMPARE_ELECTRICITY.add(callback.from_user.id)
        await callback.message.answer(
            "üí° –í–≤–µ–¥–∏—Ç–µ –æ–±—â–∏–π —Ç–∞—Ä–∏—Ñ –∑–∞ –∫–í—Ç‚ãÖ—á (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>6 RUB</code> –∏–ª–∏ <code>0.1 USD</code>)\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=build_quick_tariff_kb("cmp_tariff_"),
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=MAIN_MENU)
    await callback.answer()

@dp.callback_query(F.data.startswith("cmp_tariff_"))
async def cb_cmp_quick_tariff(callback):
    user_id = callback.from_user.id
    sess = COMPARE_SESSION.get(user_id, {})
    if not sess.get("d1") or not sess.get("d2"):
        await callback.answer()
        return
    data = callback.data.split("cmp_tariff_")[-1]
    if data == "custom":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –≤—Ä—É—á–Ω—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>6 RUB</code> –∏–ª–∏ <code>0.1 USD</code>", reply_markup=MAIN_MENU)
        await callback.answer()
        return
    if data == "rub":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –≤ ‚ÇΩ/–∫–í—Ç‚ãÖ—á, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>5</code>", reply_markup=MAIN_MENU)
        await callback.answer()
        return
    try:
        price = float(data)
    except Exception:
        await callback.answer()
        return
    await _compare_and_show(callback.message, user_id, price, "USD")
    COMPARE_SESSION.pop(user_id, None)
    await callback.answer()

@dp.callback_query(F.data.startswith("nh_tariff_"))
async def cb_nh_quick_tariff(callback):
    user_id = callback.from_user.id
    sess = NH_CALC_SESSION.get(user_id, {})
    if not sess:
        await callback.answer()
        return
    data = callback.data.split("nh_tariff_")[-1]
    if data == "custom":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –≤—Ä—É—á–Ω—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>6 RUB</code> –∏–ª–∏ <code>0.1 USD</code>", reply_markup=MAIN_MENU)
        await callback.answer()
        return
    if data == "rub":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –≤ ‚ÇΩ/–∫–í—Ç‚ãÖ—á, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>5</code>", reply_markup=MAIN_MENU)
        await callback.answer()
        return
    try:
        price = float(data)
    except Exception:
        await callback.answer()
        return
    # –í—ã–ø–æ–ª–Ω–∏–º —Ä–∞—Å—á—ë—Ç –∫–∞–∫ –ø—Ä–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–≤–æ–¥–µ, –≤ –≤–∞–ª—é—Ç–µ USD
    import httpx
    payload = {
        "mode": "algo",
        "algoId": sess.get("algoId"),
        "hashrate": sess.get("hashrate"),
        "power_w": sess.get("power_w", 120),
        "electricity": {"value": price, "currency": "USD"},
        "fees": {"marketplace_pct": 2.0, "pool_pct": 1.0},
        "uptime_pct": 98.0,
        "fiat": "RUB",  # –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —É–¥–æ–±–Ω–µ–µ –≤ —Ä—É–±–ª—è—Ö
        "periods": ["1h","24h","168h","720h"],
    }
    try:
        async with httpx.AsyncClient(timeout=20.0) as client:
            r = await client.post(f"{SERVICE_BASE_URL}/calculate", json=payload)
            r.raise_for_status()
            result = r.json()
        p = result.get("periods", {})
        def fmt(v):
            return f"{v:,.2f}".replace(",", " ")
        sym = "‚ÇΩ"
        roi_line = ""
        # –î–æ–±–∞–≤–∏–º ROI –ø–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ü–µ–Ω–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        price_rub = sess.get("device_price_rub")
        if isinstance(price_rub, (int, float)) and price_rub > 0:
            day_net = p.get("24h", {}).get("net_profit_fiat", 0.0)
            roi_days = price_rub / day_net if day_net > 0 else None
            if roi_days:
                roi_line = f"\nüìÖ ROI: ~{roi_days:.0f} –¥–Ω–µ–π –ø—Ä–∏ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö"
        text = (
            f"üßÆ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç (NH): {result.get('algoId')}</b>\n"
            f"–ï–¥.: <b>{result.get('unit')}</b> | –í–∞–ª—é—Ç–∞: <b>{payload['fiat']}</b>\n\n"
            f"‚è± 1—á: –≤–∞–ª: {fmt(p.get('1h',{}).get('revenue_fiat',0))}{sym}, —ç–ª.: {fmt(p.get('1h',{}).get('electricity_cost_fiat',0))}{sym}, –∫–æ–º–∏—Å—Å–∏—è: {fmt(p.get('1h',{}).get('fees_fiat',0))}{sym}, —á–∏—Å—Ç–∞—è: <b>{fmt(p.get('1h',{}).get('net_profit_fiat',0))}{sym}</b>\n"
            f"üìÖ 24—á: –≤–∞–ª: {fmt(p.get('24h',{}).get('revenue_fiat',0))}{sym}, —ç–ª.: {fmt(p.get('24h',{}).get('electricity_cost_fiat',0))}{sym}, –∫–æ–º–∏—Å—Å–∏—è: {fmt(p.get('24h',{}).get('fees_fiat',0))}{sym}, —á–∏—Å—Ç–∞—è: <b>{fmt(p.get('24h',{}).get('net_profit_fiat',0))}{sym}</b>\n"
            f"üìà 7–¥: –≤–∞–ª: {fmt(p.get('168h',{}).get('revenue_fiat',0))}{sym}, —ç–ª.: {fmt(p.get('168h',{}).get('electricity_cost_fiat',0))}{sym}, –∫–æ–º–∏—Å—Å–∏—è: {fmt(p.get('168h',{}).get('fees_fiat',0))}{sym}, —á–∏—Å—Ç–∞—è: <b>{fmt(p.get('168h',{}).get('net_profit_fiat',0))}{sym}</b>\n"
            f"üóì 30–¥: –≤–∞–ª: {fmt(p.get('720h',{}).get('revenue_fiat',0))}{sym}, —ç–ª.: {fmt(p.get('720h',{}).get('electricity_cost_fiat',0))}{sym}, –∫–æ–º–∏—Å—Å–∏—è: {fmt(p.get('720h',{}).get('fees_fiat',0))}{sym}, —á–∏—Å—Ç–∞—è: <b>{fmt(p.get('720h',{}).get('net_profit_fiat',0))}{sym}</b>" + roi_line + "\n\n"
            f"<i>–†–∞—Å—á—ë—Ç—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ; –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç–∞–≤–æ–∫ ‚Äî NiceHash API.</i>"
        )
        await callback.message.answer(text, reply_markup=MAIN_MENU)
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞: {e}", reply_markup=MAIN_MENU)
    finally:
        AWAIT_NH_ELECTRICITY.discard(user_id)
        NH_CALC_SESSION.pop(user_id, None)
    await callback.answer()
@dp.callback_query(F.data.startswith("nh_algo_"))
async def cb_nh_algo(callback):
    algo_id = callback.data.split("nh_algo_")[-1]
    user_id = callback.from_user.id
    NH_CALC_SESSION[user_id] = {"algoId": algo_id}
    AWAIT_NH_HASHRATE.add(user_id)
    await callback.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ä–µ–π—Ç –∏ –µ–¥–∏–Ω–∏—Ü—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>120 TH</code>", reply_markup=MAIN_MENU)
    await callback.answer()

# üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
@dp.message(F.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def cmd_calculator(message: Message):
    user_id = message.from_user.id
    CALC_SESSION[user_id] = {"mode": None}
    # –ò–Ω–ª–∞–π–Ω‚Äë—Ä–µ–∂–∏–º—ã
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –ü–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É (–ø—Ä–µ—Å–µ—Ç—ã)", callback_data="calc_mode_device")],
        [InlineKeyboardButton(text="‚õèÔ∏è –ü–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É (–≤–≤–µ—Å—Ç–∏ —Ö–µ—à—Ä–µ–π—Ç)", callback_data="calc_mode_algo")],
        [InlineKeyboardButton(text="üìã –ü–æ –º–æ–¥–µ–ª–∏ (—Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥)", callback_data="calc_mode_model")],
    ])
    await message.answer(
        "üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb,
    )

@dp.message(Command("algo"))
async def cmd_algo_list(message: Message):
    # –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É /algorithms
    import httpx
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            r = await client.get(f"{SERVICE_BASE_URL}/algorithms")
            r.raise_for_status()
            algos = r.json()
        names = [f"‚Ä¢ {a.get('name')} ({a.get('id')}) ‚Äî –µ–¥.: {a.get('unit')}" for a in algos[:20]]
        txt = "ü™ô <b>–ê–ª–≥–æ—Ä–∏—Ç–º—ã (–ø–µ—Ä–≤—ã–µ 20)</b>\n\n" + "\n".join(names) + "\n\n<i>–î–∞–Ω–Ω—ã–µ –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</i>"
        await message.answer(txt, reply_markup=MAIN_MENU)
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤. {e}", reply_markup=MAIN_MENU)

@dp.message(F.text == "—Ç–∞—Ä–∏—Ñ")
async def text_set_tariff(message: Message):
    AWAIT_TARIFF.add(message.from_user.id)
    await message.answer(
        "‚ö° –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–∞—Ä–∏—Ñ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –≤ $/–∫–í—Ç‚ãÖ—á (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.06)",
        reply_markup=MAIN_MENU,
    )

@dp.message(F.text == "–≤–∞–ª—é—Ç–∞")
async def text_set_currency(message: Message):
    AWAIT_CURRENCY.add(message.from_user.id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∫üá∏ USD", callback_data="cur_USD"),
            InlineKeyboardButton(text="üá∑üá∫ RUB", callback_data="cur_RUB"),
        ],
        [
            InlineKeyboardButton(text="üá™üá∫ EUR", callback_data="cur_EUR"),
            InlineKeyboardButton(text="üá®üá≥ CNY", callback_data="cur_CNY"),
        ],
    ])
    await message.answer("üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=kb)

@dp.callback_query(F.data.startswith("cur_"))
async def cb_set_currency(callback):
    if callback.from_user.id not in AWAIT_CURRENCY:
        await callback.answer()
        return
    currency = callback.data.split("_")[-1]
    await update_user_currency(callback.from_user.id, currency)
    AWAIT_CURRENCY.discard(callback.from_user.id)
    await callback.message.answer(f"‚úÖ –í–∞–ª—é—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: <b>{currency}</b>", reply_markup=MAIN_MENU)
    await callback.answer("–ì–æ—Ç–æ–≤–æ")

# –†–µ–∂–∏–º—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
@dp.callback_query(F.data == "calc_mode_model")
async def cb_calc_mode_model(callback):
    user_id = callback.from_user.id
    CALC_SESSION[user_id] = {"mode": "model"}
    await callback.message.answer(
        "üì¶ –†–µ–∂–∏–º –ø–æ –º–æ–¥–µ–ª–∏.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>—Ç–∞—Ä–∏—Ñ  –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏</code>\n–ü—Ä–∏–º–µ—Ä: <code>0.08 Antminer S21 XP Hydro</code>\n\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ <b>—Å–ø–∏—Å–æ–∫</b> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.",
        reply_markup=MAIN_MENU,
    )
    await callback.answer()

@dp.callback_query(F.data == "calc_mode_algo")
async def cb_calc_mode_algo(callback):
    user_id = callback.from_user.id
    CALC_SESSION[user_id] = {"mode": "algo"}
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ –∏ —Å—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏
    import httpx
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            r = await client.get(f"{SERVICE_BASE_URL}/algorithms")
            r.raise_for_status()
            algos = r.json()
        rows = []
        row = []
        for a in algos[:12]:
            row.append(InlineKeyboardButton(text=a.get('name', a.get('id')), callback_data=f"calc_algo_{a.get('id')}"))
            if len(row) == 3:
                rows.append(row)
                row = []
        if row:
            rows.append(row)
        kb = InlineKeyboardMarkup(inline_keyboard=rows)
        await callback.message.answer("‚õèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –º–∞–π–Ω–∏–Ω–≥–∞:", reply_markup=kb)
    except Exception as e:
        await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã. {e}", reply_markup=MAIN_MENU)
    await callback.answer()

@dp.callback_query(F.data.startswith("calc_algo_"))
async def cb_calc_algo_selected(callback):
    user_id = callback.from_user.id
    algo = callback.data.split("calc_algo_")[-1]
    CALC_SESSION[user_id] = {"mode": "algo", "algo": algo}
    # –í–º–µ—Å—Ç–æ –º–æ–Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º —Ö–µ—à—Ä–µ–π—Ç
    units_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="MH/s", callback_data="calc_unit_MH"), InlineKeyboardButton(text="GH/s", callback_data="calc_unit_GH"), InlineKeyboardButton(text="TH/s", callback_data="calc_unit_TH")],
        [InlineKeyboardButton(text="PH/s", callback_data="calc_unit_PH"), InlineKeyboardButton(text="EH/s", callback_data="calc_unit_EH")]
    ])
    await callback.message.answer(
        f"‚õèÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º: <b>{algo}</b>\n–í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ä–µ–π—Ç –∏ –µ–¥–∏–Ω–∏—Ü—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>120 TH</code>) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ:",
        reply_markup=units_kb,
    )
    AWAIT_NH_HASHRATE.add(user_id)
    await callback.answer()

@dp.callback_query(F.data.startswith("calc_unit_"))
async def cb_calc_unit(callback):
    unit = callback.data.split("calc_unit_")[-1]
    user_id = callback.from_user.id
    AWAIT_NH_HASHRATE.add(user_id)
    await callback.message.answer(f"üî¢ –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –≤ {unit}, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>120</code>", reply_markup=MAIN_MENU)
    await callback.answer()

@dp.callback_query(F.data == "calc_mode_device")
async def cb_calc_mode_device(callback):
    import httpx
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            r = await client.get(f"{SERVICE_BASE_URL}/devices")
            r.raise_for_status()
            devices = r.json()
        rows = []
        for d in devices:
            title = f"{d.get('vendor')} {d.get('model')}"
            rows.append([InlineKeyboardButton(text=title, callback_data=f"nh_dev_{d.get('id')}")])
        kb = InlineKeyboardMarkup(inline_keyboard=rows)
        await callback.message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", reply_markup=kb)
    except Exception as e:
        await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. {e}", reply_markup=MAIN_MENU)
    await callback.answer()

@dp.callback_query(F.data.startswith("nh_dev_"))
async def cb_nh_device(callback):
    dev_id = callback.data.split("nh_dev_")[-1]
    import httpx
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            r = await client.get(f"{SERVICE_BASE_URL}/devices")
            r.raise_for_status()
            devices = r.json()
        dev = next((d for d in devices if d.get('id') == dev_id), None)
        if not dev:
            await callback.message.answer("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=MAIN_MENU)
            await callback.answer()
            return
        user_id = callback.from_user.id
        NH_CALC_SESSION[user_id] = {
            "algoId": dev.get('algoId'),
            "hashrate": {"value": float(dev.get('nominal_hashrate_value', 0)), "unit": dev.get('unit', 'TH')},
            "power_w": float(dev.get('power_w', 0)),
        }
        AWAIT_NH_ELECTRICITY.add(user_id)
        # –°–æ—Ö—Ä–∞–Ω–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞) –¥–ª—è –±—É–¥—É—â–µ–≥–æ ROI
        title = f"{dev.get('vendor')} {dev.get('model')}"
        NH_CALC_SESSION[user_id]["device_title"] = title
        NH_CALC_SESSION[user_id]["device_price_rub"] = _get_price_rub(title)
        await callback.message.answer(
            f"üì¶ –í—ã–±—Ä–∞–Ω–æ: <b>{title}</b>\n"
            f"üî¢ –•–µ—à—Ä–µ–π—Ç: {dev.get('nominal_hashrate_value')} {dev.get('unit')} | ‚ö° {dev.get('power_w')}W\n\n"
            "üí° –í–≤–µ–¥–∏—Ç–µ —Ç–∞—Ä–∏—Ñ: <code>6 RUB</code> –∏–ª–∏ <code>0.1 USD</code>\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=build_quick_tariff_kb("nh_tariff_"),
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}", reply_markup=MAIN_MENU)
    await callback.answer()

@dp.callback_query(F.data.startswith("calc_coins_"))
async def cb_calc_coins(callback):
    user_id = callback.from_user.id
    sess = CALC_SESSION.get(user_id, {})
    if sess.get("mode") != "algo":
        await callback.answer()
        return
    if callback.data == "calc_coins_custom":
        AWAIT_CALC.add(user_id)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–æ–Ω–µ—Ç –≤ —Å—É—Ç–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 12.5", reply_markup=MAIN_MENU)
        await callback.answer()
        return
    coins_per_day = float(callback.data.split("_")[-1])
    algo = sess.get("algo", "")
    # –ü–æ–ª—É—á–∏–º —Ü–µ–Ω—É –º–æ–Ω–µ—Ç—ã –∏ —Å–¥–µ–ª–∞–µ–º —Ä–∞—Å—á—ë—Ç –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
    # –ü–æ–ª—É—á–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –≤ —Ñ–∏–∞—Ç (RUB)
    import httpx
    price_usd = await get_algo_price_usd(algo)
    gross_usd_day = coins_per_day * price_usd
    # –°–ø—Ä–æ—Å–∏–º —Ç–∞—Ä–∏—Ñ $/–∫–í—Ç‚ãÖ—á —á–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    tariff_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="$0.03", callback_data="calc_tariff_0.03"), InlineKeyboardButton(text="$0.05", callback_data="calc_tariff_0.05")],
        [InlineKeyboardButton(text="$0.07", callback_data="calc_tariff_0.07"), InlineKeyboardButton(text="$0.08", callback_data="calc_tariff_0.08")],
        [InlineKeyboardButton(text="$0.10", callback_data="calc_tariff_0.10"), InlineKeyboardButton(text="‚ÇΩ –†—É–±–ª–∏", callback_data="calc_tariff_rub")],
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="calc_tariff_custom")]
    ])
    sess.update({"coins_per_day": coins_per_day, "price_usd": price_usd, "gross_usd_day": gross_usd_day})
    CALC_SESSION[user_id] = sess
    await callback.message.answer(
        f"üí∞ –¶–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã: <b>${price_usd:.4f}</b> | –î–æ—Ö–æ–¥ (–≥—Ä—è–∑–Ω—ã–π): <b>${gross_usd_day:.2f}/–¥</b>\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ:",
        reply_markup=tariff_kb,
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("calc_tariff_"))
async def cb_calc_tariff(callback):
    user_id = callback.from_user.id
    sess = CALC_SESSION.get(user_id, {})
    if sess.get("mode") != "algo":
        await callback.answer()
        return
    if callback.data == "calc_tariff_custom":
        AWAIT_CALC_TARIFF.add(user_id)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–∞—Ä–∏—Ñ –≤ $/–∫–í—Ç‚ãÖ—á, –Ω–∞–ø—Ä–∏–º–µ—Ä: 0.06", reply_markup=MAIN_MENU)
        await callback.answer()
        return
    if callback.data == "calc_tariff_rub":
        AWAIT_CALC_TARIFF.add(user_id)
        sess["tariff_currency"] = "RUB"
        CALC_SESSION[user_id] = sess
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–∞—Ä–∏—Ñ –≤ ‚ÇΩ/–∫–í—Ç‚ãÖ—á, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5", reply_markup=MAIN_MENU)
        await callback.answer()
        return
    tariff = float(callback.data.split("_")[-1])
    sess["tariff"] = tariff
    CALC_SESSION[user_id] = sess
    await _finish_algo_session(callback.message, user_id)
    await callback.answer()

@dp.message()
async def handler_inline_states(message: Message):
    # –¢–∞—Ä–∏—Ñ –æ–∂–∏–¥–∞–Ω–∏–µ
    if message.from_user.id in AWAIT_TARIFF:
        value = message.text.replace(",", ".").strip()
        try:
            tariff = float(value)
            if not (0 < tariff < 1):
                raise ValueError
            await update_user_tariff(message.from_user.id, tariff)
            usd_rub = await currency_api.get_usd_rub_rate()
            await message.answer(
                f"‚úÖ –¢–∞—Ä–∏—Ñ –æ–±–Ω–æ–≤–ª—ë–Ω: <b>${tariff:.3f}/–∫–í—Ç‚ãÖ—á</b> (~{tariff*usd_rub:.2f}‚ÇΩ/–∫–í—Ç‚ãÖ—á)",
                reply_markup=MAIN_MENU,
            )
        except Exception:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: 0.07", reply_markup=MAIN_MENU)
        finally:
            AWAIT_TARIFF.discard(message.from_user.id)
        return

    # –í–≤–æ–¥ —Ç–∞—Ä–∏—Ñ–∞ (–∏–Ω–ª–∞–π–Ω –≤–µ—Ç–∫–∞)
    if message.from_user.id in AWAIT_CALC_TARIFF:
        try:
            tariff = float(message.text.replace(",", ".").strip())
            sess = CALC_SESSION.get(message.from_user.id, {})
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–ª —Ä—É–±–ª–∏, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–æ–ª–ª–∞—Ä—ã
            if sess.get("tariff_currency") == "RUB":
                usd_rub = await currency_api.get_usd_rub_rate()
                sess["tariff"] = tariff / usd_rub
            else:
                sess["tariff"] = tariff
            CALC_SESSION[message.from_user.id] = sess
            await _finish_algo_session(message, message.from_user.id)
        except Exception:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 0.06 –∏–ª–∏ 5", reply_markup=MAIN_MENU)
        finally:
            AWAIT_CALC_TARIFF.discard(message.from_user.id)
        return

    # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏–µ
    if message.from_user.id in AWAIT_CALC:
        text_raw = message.text.strip()
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω‚Äë–∫–Ω–æ–ø–∫–∏
        sess = CALC_SESSION.get(message.from_user.id)
        if sess and sess.get("mode") == "algo":
            algo = sess.get("algo")
            parts = text_raw.split()
            if len(parts) < 2:
                await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: <code>0.08 100 TH</code>", reply_markup=MAIN_MENU)
                return
            try:
                tariff = float(parts[0].replace(",", "."))
            except Exception:
                await message.answer("‚ùå –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî —Ç–∞—Ä–∏—Ñ $/–∫–í—Ç‚ãÖ—á. –ü—Ä–∏–º–µ—Ä: 0.08", reply_markup=MAIN_MENU)
                return
            try:
                value = float(parts[1].replace(",", "."))
                unit = parts[2] if len(parts) > 2 else choose_base_unit_for_algo(algo)
            except Exception:
                await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–µ—à—Ä–µ–π—Ç –∏ –µ–¥–∏–Ω–∏—Ü—É. –ü—Ä–∏–º–µ—Ä: <code>100 TH</code>", reply_markup=MAIN_MENU)
                return
            # –ü–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –Ω–∞ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—É—é –º–æ–¥–µ–ª—å WhatToMine: –±–µ—Ä—ë–º –ª—É—á—à—É—é –ø–æ —ç—Ç–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ—Ö–æ–¥ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            await load_wtm_miners_if_needed()
            base = max([m for m in CALC_WTM_CACHE["miners"] if m.algorithm.upper() == algo.upper()], key=lambda m: m.daily_usd, default=None)
            if not base:
                await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=MAIN_MENU)
                return
            # –ü–∞—Ä—Å–∏–º —Ö–µ—à—Ä–µ–π—Ç –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥
            base_hs = parse_hashrate_string_to_hs(base.hashrate)
            user_hs = convert_value_unit_to_hs(value, unit)
            scale = user_hs / base_hs if base_hs > 0 else 0
            gross_usd_day = base.daily_usd * max(scale, 0)
            # –î–ª—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –ø–æ–ø—Ä–æ—Å–∏–º –º–æ—â–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–æ—á–Ω–æ —á–µ—Ä–µ–∑ —É–¥–µ–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ (–ø—Ä–∏–±–ª.)
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏, –ø—Ä–∏–º–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏—é –º–æ—â–Ω–æ—Å—Ç–∏ –∫ —Ö–µ—à—Ä–µ–π—Ç—É —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ —É –±–∞–∑—ã
            try:
                base_power_w = base.power
                elec_cost_usd_day = (base_power_w * max(scale, 0) / 1000.0) * 24.0 * tariff
            except Exception:
                elec_cost_usd_day = 0.0
            net_usd_day = gross_usd_day - elec_cost_usd_day
            net_usd_week = net_usd_day * 7
            net_usd_month = net_usd_day * 30
            usd_rub = await currency_api.get_usd_rub_rate()
            def usd2rub(x: float) -> float:
                return x * usd_rub
            text = (
                f"üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ‚Äî {algo}</b>\n\n"
                f"üî¢ –•–µ—à—Ä–µ–π—Ç: <b>{value} {unit.upper()}</b>\n"
                f"üíµ –î–æ—Ö–æ–¥ (–≥—Ä—è–∑–Ω—ã–π): <b>${gross_usd_day:.2f}/–¥</b>\n"
                f"üîå –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ: <b>${elec_cost_usd_day:.2f}/–¥</b> –ø—Ä–∏ —Ç–∞—Ä–∏—Ñ–µ <b>${tariff:.3f}/–∫–í—Ç‚ãÖ—á</b>\n\n"
                f"‚úÖ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <b>${net_usd_day:.2f}/–¥</b> (~{usd2rub(net_usd_day):,.0f}‚ÇΩ/–¥)\n"
                f"‚Ä¢ –ù–µ–¥–µ–ª—è: <b>${net_usd_week:.2f}</b> (~{usd2rub(net_usd_week):,.0f}‚ÇΩ)\n"
                f"‚Ä¢ –ú–µ—Å—è—Ü: <b>${net_usd_month:.2f}</b> (~{usd2rub(net_usd_month):,.0f}‚ÇΩ)\n\n"
                f"‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            )
            await message.answer(text, reply_markup=MAIN_MENU)
            AWAIT_CALC.discard(message.from_user.id)
            CALC_SESSION.pop(message.from_user.id, None)
            return
        if _normalize_model_name(text_raw) == "—Å–ø–∏—Å–æ–∫":
            await load_wtm_miners_if_needed(force=False)
            names = [f"‚Ä¢ {m.vendor} {m.model}" for m in CALC_WTM_CACHE["miners"][:20]]
            await message.answer("üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–ø–µ—Ä–≤—ã–µ 20)</b>\n\n" + "\n".join(names), reply_markup=MAIN_MENU)
            return

        parts = text_raw.split()
        if len(parts) < 2:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: <code>0.08 Antminer S21 XP Hydro</code>", reply_markup=MAIN_MENU)
            return
        try:
            tariff = float(parts[0].replace(",", "."))
        except Exception:
            await message.answer("‚ùå –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî —Ç–∞—Ä–∏—Ñ $/–∫–í—Ç‚ãÖ—á. –ü—Ä–∏–º–µ—Ä: 0.08", reply_markup=MAIN_MENU)
            return

        model_query = " ".join(parts[1:])
        await load_wtm_miners_if_needed()
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∞–ª–≥–æ—Ä–∏—Ç–º (SHA-256, Scrypt, X11 –∏ —Ç.–ø.), –±–µ—Ä—ë–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –ø–æ —ç—Ç–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É
        algo = model_query.upper().replace(" ", "")
        miner = None
        if any(k in algo for k in ["SHA", "SCRYPT", "X11", "KASPA", "ETC", "ETHASH", "KHEAVYHASH", "EQUIHASH", "ZKSNARK"]):
            cand = [m for m in CALC_WTM_CACHE["miners"] if m.algorithm.upper().replace(" ", "") == algo]
            miner = max(cand, key=lambda m: m.daily_usd, default=None)
        if miner is None:
            miner = _best_match_miner(model_query)
        if not miner:
            await message.answer("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ WhatToMine. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Å–ø–∏—Å–æ–∫</b> –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏.", reply_markup=MAIN_MENU)
            return

        power_w = miner.power
        gross_usd_day = miner.daily_usd
        elec_cost_usd_day = (power_w / 1000.0) * 24.0 * tariff
        net_usd_day = gross_usd_day - elec_cost_usd_day
        net_usd_week = net_usd_day * 7
        net_usd_month = net_usd_day * 30
        usd_rub = await currency_api.get_usd_rub_rate()
        def usd2rub(x: float) -> float:
            return x * usd_rub
        text = (
            f"üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ‚Äî {miner.vendor} {miner.model}</b>\n\n"
            f"üßÆ –ê–ª–≥–æ—Ä–∏—Ç–º: <b>{miner.algorithm}</b> | ‚õèÔ∏è –•–µ—à—Ä–µ–π—Ç: <b>{miner.hashrate}</b>\n"
            f"‚ö° –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: <b>{power_w}W</b>\n"
            f"üíµ –î–æ—Ö–æ–¥ (–≥—Ä—è–∑–Ω—ã–π): <b>${gross_usd_day:.2f}/–¥</b>\n"
            f"üîå –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ: <b>${elec_cost_usd_day:.2f}/–¥</b> –ø—Ä–∏ —Ç–∞—Ä–∏—Ñ–µ <b>${tariff:.3f}/–∫–í—Ç‚ãÖ—á</b>\n\n"
            f"‚úÖ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <b>${net_usd_day:.2f}/–¥</b> (~{usd2rub(net_usd_day):,.0f}‚ÇΩ/–¥)\n"
            f"‚Ä¢ –ù–µ–¥–µ–ª—è: <b>${net_usd_week:.2f}</b> (~{usd2rub(net_usd_week):,.0f}‚ÇΩ)\n"
            f"‚Ä¢ –ú–µ—Å—è—Ü: <b>${net_usd_month:.2f}</b> (~{usd2rub(net_usd_month):,.0f}‚ÇΩ)\n\n"
            f"‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        )
        await message.answer(text, reply_markup=MAIN_MENU)
        AWAIT_CALC.discard(message.from_user.id)
        return

    # NH –ø–æ—à–∞–≥–æ–≤—ã–π: –≤–≤–æ–¥ —Ö–µ—à—Ä–µ–π—Ç–∞
    if message.from_user.id in AWAIT_NH_HASHRATE:
        try:
            parts = message.text.strip().split()
            value = float(parts[0].replace(',', '.'))
            unit = parts[1].upper() if len(parts) > 1 else 'TH'
            sess = NH_CALC_SESSION.get(message.from_user.id, {})
            sess.update({"hashrate": {"value": value, "unit": unit}})
            NH_CALC_SESSION[message.from_user.id] = sess
            AWAIT_NH_HASHRATE.discard(message.from_user.id)
            AWAIT_NH_POWER.add(message.from_user.id)
            await message.answer("‚ö° –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–í—Ç), –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>3250</code>", reply_markup=MAIN_MENU)
        except Exception:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: <code>120 TH</code>", reply_markup=MAIN_MENU)
        return

    # NH –ø–æ—à–∞–≥–æ–≤—ã–π: –≤–≤–æ–¥ –º–æ—â–Ω–æ—Å—Ç–∏
    if message.from_user.id in AWAIT_NH_POWER:
        try:
            power = float(message.text.strip().replace(',', '.'))
            sess = NH_CALC_SESSION.get(message.from_user.id, {})
            sess.update({"power_w": power})
            NH_CALC_SESSION[message.from_user.id] = sess
            AWAIT_NH_POWER.discard(message.from_user.id)
            AWAIT_NH_ELECTRICITY.add(message.from_user.id)
            await message.answer("üí° –í–≤–µ–¥–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∑–∞ –∫–í—Ç‚ãÖ—á –∏ –≤–∞–ª—é—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>6 RUB</code> –∏–ª–∏ <code>0.1 USD</code>\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=build_quick_tariff_kb("nh_tariff_"))
        except Exception:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3250", reply_markup=MAIN_MENU)
        return

    # NH –ø–æ—à–∞–≥–æ–≤—ã–π: –≤–≤–æ–¥ —Ç–∞—Ä–∏—Ñ–∞ –∏ —Ä–∞—Å—á—ë—Ç
    if message.from_user.id in AWAIT_NH_ELECTRICITY:
        import httpx
        try:
            parts = message.text.strip().split()
            price = float(parts[0].replace(',', '.'))
            ccy = (parts[1] if len(parts) > 1 else 'RUB').upper()
            sess = NH_CALC_SESSION.get(message.from_user.id, {})
            payload = {
                "mode": "algo",
                "algoId": sess.get("algoId"),
                "hashrate": sess.get("hashrate"),
                "power_w": sess.get("power_w", 120),
                "electricity": {"value": price, "currency": ccy},
                "fees": {"marketplace_pct": 2.0, "pool_pct": 1.0},
                "uptime_pct": 98.0,
                "fiat": ccy if ccy in ["RUB","USD","EUR","CZK"] else "RUB",
                "periods": ["1h","24h","168h","720h"],
            }
            async with httpx.AsyncClient(timeout=20.0) as client:
                r = await client.post(f"{SERVICE_BASE_URL}/calculate", json=payload)
                r.raise_for_status()
                result = r.json()
            p = result.get("periods", {})
            def fmt(v):
                return f"{v:,.2f}".replace(",", " ")
            sym = {"RUB":"‚ÇΩ","USD":"$","EUR":"‚Ç¨","CZK":"Kƒç"}.get(payload["fiat"], "")
            # ROI (–µ—Å–ª–∏ –∑–Ω–∞–µ–º —Ü–µ–Ω—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
            roi_line = ""
            price_rub = sess.get("device_price_rub")
            if isinstance(price_rub, (int, float)) and price_rub > 0:
                day_net = p.get("24h", {}).get("net_profit_fiat", 0.0)
                if payload["fiat"] == "RUB":
                    roi_days = price_rub / day_net if day_net > 0 else None
                elif payload["fiat"] == "USD":
                    usd_rub = await currency_api.get_usd_rub_rate()
                    price_usd = price_rub / usd_rub if usd_rub > 0 else None
                    roi_days = (price_usd / day_net) if (price_usd and day_net > 0) else None
                else:
                    roi_days = None
                if roi_days:
                    roi_line = f"\nüìÖ ROI: ~{roi_days:.0f} –¥–Ω–µ–π –ø—Ä–∏ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö"
            text = (
                f"üßÆ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç (NH): {result.get('algoId')}</b>\n"
                f"–ï–¥.: <b>{result.get('unit')}</b> | –í–∞–ª—é—Ç–∞: <b>{payload['fiat']}</b>\n\n"
                f"‚è± 1—á: –≤–∞–ª: {fmt(p.get('1h',{}).get('revenue_fiat',0))}{sym}, —ç–ª.: {fmt(p.get('1h',{}).get('electricity_cost_fiat',0))}{sym}, –∫–æ–º–∏—Å—Å–∏—è: {fmt(p.get('1h',{}).get('fees_fiat',0))}{sym}, —á–∏—Å—Ç–∞—è: <b>{fmt(p.get('1h',{}).get('net_profit_fiat',0))}{sym}</b>\n"
                f"üìÖ 24—á: –≤–∞–ª: {fmt(p.get('24h',{}).get('revenue_fiat',0))}{sym}, —ç–ª.: {fmt(p.get('24h',{}).get('electricity_cost_fiat',0))}{sym}, –∫–æ–º–∏—Å—Å–∏—è: {fmt(p.get('24h',{}).get('fees_fiat',0))}{sym}, —á–∏—Å—Ç–∞—è: <b>{fmt(p.get('24h',{}).get('net_profit_fiat',0))}{sym}</b>\n"
                f"üìà 7–¥: –≤–∞–ª: {fmt(p.get('168h',{}).get('revenue_fiat',0))}{sym}, —ç–ª.: {fmt(p.get('168h',{}).get('electricity_cost_fiat',0))}{sym}, –∫–æ–º–∏—Å—Å–∏—è: {fmt(p.get('168h',{}).get('fees_fiat',0))}{sym}, —á–∏—Å—Ç–∞—è: <b>{fmt(p.get('168h',{}).get('net_profit_fiat',0))}{sym}</b>\n"
                f"üóì 30–¥: –≤–∞–ª: {fmt(p.get('720h',{}).get('revenue_fiat',0))}{sym}, —ç–ª.: {fmt(p.get('720h',{}).get('electricity_cost_fiat',0))}{sym}, –∫–æ–º–∏—Å—Å–∏—è: {fmt(p.get('720h',{}).get('fees_fiat',0))}{sym}, —á–∏—Å—Ç–∞—è: <b>{fmt(p.get('720h',{}).get('net_profit_fiat',0))}{sym}</b>" + roi_line + "\n\n"
                f"<i>–†–∞—Å—á—ë—Ç—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ; –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç–∞–≤–æ–∫ ‚Äî NiceHash API.</i>"
            )
            await message.answer(text, reply_markup=MAIN_MENU)
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞: {e}", reply_markup=MAIN_MENU)
        finally:
            AWAIT_NH_ELECTRICITY.discard(message.from_user.id)
            NH_CALC_SESSION.pop(message.from_user.id, None)
        return

    # /compare: —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–∞—Ä–∏—Ñ–∞
    if message.from_user.id in AWAIT_COMPARE_ELECTRICITY:
        parts = message.text.strip().split()
        if not parts:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∞—Ä–∏—Ñ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>6 RUB</code> –∏–ª–∏ <code>0.1 USD</code>", reply_markup=MAIN_MENU)
            return
        try:
            price = float(parts[0].replace(',', '.'))
        except Exception:
            await message.answer("‚ùå –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: <code>6 RUB</code>", reply_markup=MAIN_MENU)
            return
        ccy = (parts[1] if len(parts) > 1 else 'RUB').upper()
        await _compare_and_show(message, message.from_user.id, price, ccy)
        AWAIT_COMPARE_ELECTRICITY.discard(message.from_user.id)
        COMPARE_SESSION.pop(message.from_user.id, None)
        return

    # –§–æ–ª–±—ç–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —ç–º–æ–¥–∑–∏/—Ä–∞—Å–∫–ª–∞–¥–∫–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è)
    txt = (message.text or "").lower()
    if any(k in txt for k in ["–Ω–∞—Å—Ç—Ä–æ–π", "settings"]):
        await cmd_settings(message)
        return
    if any(k in txt for k in ["–≥–∞–π–¥", "guide"]):
        await cmd_guide(message)
        return

# üêõ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (debug)
@dp.message()
async def debug_handler(message: Message):
    print(f"üêõ DEBUG: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    response = """
ü§ñ <b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É!</b>

üí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>
‚Ä¢ –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ‚¨áÔ∏è
‚Ä¢ –ö–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
‚Ä¢ –ö–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞

<i>–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ @support_asic_bot –¥–ª—è –ø–æ–º–æ—â–∏</i>
"""
    
    await message.answer(response, reply_markup=MAIN_MENU)

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û ASIC Profit Bot...")
    print("‚úÖ –ë–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π, –±–µ–∑ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
    print("‚úÖ –í—Å–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!")
    print("üí± –†–µ–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD/RUB –æ—Ç –¶–ë –†–§!")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ë–î (–∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç 'no such table: users')
    try:
        await init_user_db()
    except Exception as e:
        print(f"‚ö†Ô∏è init_user_db error: {e}")

    # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫)
    asyncio.create_task(load_wtm_miners_if_needed(force=True))

    # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π webhook, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å long polling
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        print("‚úÖ Webhook cleared before polling")
    except Exception as e:
        print(f"‚ö†Ô∏è delete_webhook error: {e}")

    # –ó–∞–ø—É—Å–∫ polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 